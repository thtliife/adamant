const sourceIndex = {
  fileName: 'src/index.js',
  content: ''
};

const editorConfig = {
  fileName: '.editorconfig',
  content: `# EditorConfig is awesome: http://EditorConfig.org

# top-most EditorConfig file
root = true

[*.md]
trim_trailing_whitespace = false

[*.js]
trim_trailing_whitespace = true

# Unix-style newlines with a newline ending every file
[*]
indent_style = space
indent_size = 2
end_of_line = lf
charset = utf-8
insert_final_newline = true
max_line_length = 80`
};

const eslintIgnore = {
  fileName: '.eslintignore',
  content: `/.git
node_modules`
};

const eslintrc = {
  fileName: '.eslintrc.js',
  content: `module.exports = {
  env: {
    browser: true,
    es6: true,
    node: true
  },
  extends: ['plugin:jest/recommended', 'jest-enzyme'],
  plugins: ['babel', 'import', 'jsx-a11y', 'react', 'prettier'],
  parser: 'babel-eslint',
  parserOptions: {
    ecmaVersion: 7,
    sourceType: 'module',
    ecmaFeatures: {
      jsx: true
    }
  },
  rules: {
    quotes: ['error', 'single', { allowTemplateLiterals: true }],
    'react/require-default-props': 'off',
    'react/forbid-prop-types': 'off',
    'react/jsx-filename-extension': ['error', { extensions: ['.js', '.jsx'] }],

    'react/no-find-dom-node': 'off',
    'react/no-did-mount-set-state': 'off',
    'react/no-unused-prop-types': 'off',
    'react/jsx-one-expression-per-line': 'off',

    'jsx-a11y/anchor-is-valid': [
      'error',
      { components: ['Link'], specialLink: ['to'] }
    ],
    'jsx-a11y/label-has-for': [
      2,
      {
        required: {
          every: ['id']
        }
      }
    ],

    'prettier/prettier': ['error']
  }
};
`
};
const gitignore = {
  fileName: '.gitignore',
  content: `
# Created by https://www.gitignore.io/api/serverless,node,osx
# Edit at https://www.gitignore.io/?templates=serverless,node,osx

### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

### OSX ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \\r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### Serverless ###
# Ignore build directory
.serverless

# End of https://www.gitignore.io/api/serverless,node,osx
`
};

const prettierConfig = {
  fileName: 'prettier.config.js',
  content: `module.exports = {
  arrowParens: 'avoid', // <avoid|always> | default 'avoid'
  bracketSpacing: true, // <bool> | default true
  endOfLine: 'auto', // '<auto|lf|crlf|cr>' | default 'auto'
  htmlWhitespaceSensitivity: 'css', // '<css|strict|ignore>' | default 'css'

  insertPragma: false, // <bool> | default false
  jsxBracketSameLine: false, // <bool> | default false
  jsxSingleQuote: false, // <bool> | default false
  overrides: [
    { files: '.prettierrc', options: { parser: 'babel' } },
    { files: '*.json', options: { parser: 'json' } },
    { files: '*.html', options: { parser: 'html' } },
    { files: '*.css', options: { parser: 'css' } },
    { files: '*.less', options: { parser: 'less' } },
    { files: '*.scss', options: { parser: 'scss' } },
    { files: '*.sass', options: { parser: 'scss' } },
    { files: '*.graphql', options: { parser: 'graphql' } },
    { files: '*.md', options: { parser: 'markdown' } },
    { files: '*.vue', options: { parser: 'vue' } }
  ],
  parser: 'babel',
  printWidth: 80, // <int> | default 80
  proseWrap: 'preserve', // '<always|never|preserve>' | default 'preserve'
  requirePragma: false, // <bool> | default false
  semi: true, // <bool> | default true
  singleQuote: true, // <bool> | default false
  tabWidth: 2, // <int> | default 2
  trailingComma: 'none', // '<none|es5|all>' | default 'none'
  useTabs: false // <bool> |  <bool> | default false
};
`
};

module.exports = {
  editorConfig,
  eslintIgnore,
  eslintrc,
  gitignore,
  prettierConfig,
  sourceIndex
};
